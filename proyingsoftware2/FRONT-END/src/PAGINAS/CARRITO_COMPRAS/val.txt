  let ordenIDGlobal = null; // Variable global para almacenar el ID de la orden

const handleFinalizarCompra = async () => {
  if (!metodoEntrega) {
    alert('Selecciona un método de entrega.');
    return;
  }

  if (metodoEntrega === 'recojo' && !botica) {
    alert('Selecciona una botica para el recojo.');
    return;
  }

  if (metodoEntrega === 'entrega' && !direccion) {
    alert('Ingrese una dirección de entrega válida.');
    return;
  }

  if (!numeroTarjeta || errorTarjeta) {
    alert('Ingrese un número de tarjeta válido.');
    return;
  }

  if (!cvv || errorCvv) {
    alert('Ingrese un CVV válido.');
    return;
  }

  const usuario = JSON.parse(localStorage.getItem('user'));
  const usuarioID = usuario?.id;

  try {
    // Paso 1: Llamada a la API para crear la orden
    const response = await fetch(`http://localhost:4000/api/ordenes/crearOrden/${usuarioID}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        direccionEnvio: metodoEntrega === 'entrega' ? direccion : '',  // Enviar dirección si es "entrega"
        metodoEntrega: metodoEntrega,
        botica: metodoEntrega === 'recojo' ? botica : '',  // Enviar botica si es "recojo"
      }),
    });

    const data = await response.json();

    if (response.ok && data.orden?.id) {
      const ordneID = data.orden.id; // Almacenar el ID de la orden

      // Paso 2: Llamada para llenar la tabla ProductoOrden
      const llenarProductoOrdenResponse = await fetch(`http://localhost:4000/api/ordenes/llenarProductoOrden/${usuarioID}/${ordenID}`, {
        method: 'POST',
      });

      const productoOrdenData = await llenarProductoOrdenResponse.json();

      if (llenarProductoOrdenResponse.ok) {
        // Paso 3: Actualizar el stock de los productos
        const actualizarStockResponse = await fetch(`http://localhost:4000/api/productos/actualizarStockProductos/${usuarioID}`, {
          method: 'PUT',
        });

        const stockData = await actualizarStockResponse.json();

        if (actualizarStockResponse.ok) {
          // Paso 4: Eliminar el carrito y los productos del carrito
          const eliminarCarritoResponse = await fetch(`http://localhost:4000/api/carrito/eliminar/${usuarioID}`, {
            method: 'DELETE',
          });

          const eliminarCarritoData = await eliminarCarritoResponse.json();

          if (eliminarCarritoResponse.ok) {
            // Todo el proceso se completó con éxito
            alert('Compra realizada con éxito, productos añadidos a la orden, stock actualizado y carrito eliminado.');
          } else {
            console.log('Error al eliminar el carrito:', eliminarCarritoData);
            alert('Error al eliminar el carrito.');
          }
        } else {
          console.log('Error al actualizar el stock:', stockData);
          alert('Error al actualizar el stock de los productos.');
        }
      } else {
        console.log('Error al llenar ProductoOrden:', productoOrdenData);
        alert('Error al añadir productos a la orden.');
      }
    } else {
      console.log('Error en la respuesta del servidor:', data);
      alert('Error al realizar la compra: ' + (data.mensaje || 'Error desconocido.'));
    }
  } catch (error) {
    console.error('Error al realizar la compra:', error);
    alert('Ocurrió un error al procesar tu compra.');
  }
};


  